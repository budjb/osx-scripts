#!/bin/bash

# Fail on any error.
set -e

# Determine the remote, defaulting to "upstream"
if (( $# == 1 )); then
    upstream=$1
else
    upstream="upstream"
fi

# Function that switches to a specified branch and pulls in
# changes from upstream into the origin remote.
function update_branch() {
    git checkout "$1"
    git reset --hard "$upstream"/"$1"
    git push -u --force origin "$1"
}

# Mark the current branch so we can end up on the branch we started on.
current_branch=$(git symbolic-ref --short HEAD)

# Determine if we have both origin and upstream remotes.
has_origin=0
has_upstream=0
while read -r line; do
    if [ "$line" = "$upstream" ]; then
        has_upstream=1
    elif [ "$line" = "origin" ]; then
        has_origin=1
    fi
done <<< "$(git remote)"

# If origin is missing, exit out.
if (( $has_origin == 0 )); then
    echo "The remote \"origin\" is missing."
    exit 1
fi

# If upstream is missing, exit out.
if (( $has_upstream == 0 )); then
    echo "The remote \"$upstream\" is missing."
    exit 1
fi

# Fetch the latest refs from upstream and origin
git fetch "$upstream"
git fetch origin

# Update the main branches all repositories should have.
update_branch "master"
update_branch "staging"
update_branch "development"

# Merge in master updates into the development branch
# so that backmerges are maintained without having to think
# about it.
git checkout development
git merge master -m "Back-merging changes from the master branch into development to keep history in sync."
git push

# Switch back to the branch we started on.
git checkout $current_branch

